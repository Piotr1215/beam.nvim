*beam.txt*                        Remote text operations without moving cursor

==============================================================================
Table of Contents                                     *beam-table-of-contents*

1. beam.nvim                                                  |beam-beam.nvim|
  - How it works                                 |beam-beam.nvim-how-it-works|
  - Quick Examples                             |beam-beam.nvim-quick-examples|
  - Features                                         |beam-beam.nvim-features|
  - Installation                                 |beam-beam.nvim-installation|
  - Configuration                               |beam-beam.nvim-configuration|
  - Usage                                               |beam-beam.nvim-usage|
  - Technical Details                       |beam-beam.nvim-technical-details|
  - Integration with Other Plugins|beam-beam.nvim-integration-with-other-plugins|
  - Comparison with Alternatives |beam-beam.nvim-comparison-with-alternatives|
  - Showcase                                         |beam-beam.nvim-showcase|
  - Commands                                         |beam-beam.nvim-commands|
  - Troubleshooting                           |beam-beam.nvim-troubleshooting|
  - Credits                                           |beam-beam.nvim-credits|
  - License                                           |beam-beam.nvim-license|
2. Links                                                          |beam-links|

==============================================================================
1. beam.nvim                                                  *beam-beam.nvim*

**Beam me up! Transport your text operations across file moving only when
required.**

`beam.nvim` makes it possible to perform text operations (yank, delete, change,
visual selection) anywhere in your file using search, while moving only when
needed.



HOW IT WORKS                                     *beam-beam.nvim-how-it-works*

Press `,yi"` → Search for any string → Press Enter → The quotes at that
location are yanked, and you’re still where you started.

No jumping. No marks. No macros. Just pure efficiency.


QUICK EXAMPLES                                 *beam-beam.nvim-quick-examples*

>vim
    ,yi"<Enter>     " Yank inside the NEXT quotes (empty search)
    ,dip            " Search & delete inside paragraph
    ,ci(func        " Search for 'func' & change inside parentheses
    ,vimclass       " Search for 'class' & select inside code block
    ,Y              " Search & yank entire line
<


FEATURES                                             *beam-beam.nvim-features*


CORE FEATURES ~

- **Native Search Integration**Uses Vim’s `/` search with incremental highlighting
- **Quick Mode**Press Enter without searching to operate on the NEXT occurrence
- **Visual Feedback**See what you’re about to operate on before it happens
- **Smart Position Restore**Stay where you are (or intelligently move for edits)
- **All Text Objects**Works with every text object you have installed
- **Statusline Indicator**Optional indicator shows pending operations


ADVANCED FEATURES ~

- **Ctrl-G/T Navigation**Navigate through matches while searching before committing
- **Line Operators**Special `Y`, `D`, `C`, `V` operators for entire lines
- **WhichKey Support**Automatic integration if you have WhichKey installed
- **Custom Text Objects**Register your own text objects via simple API
- **Zero Dependencies**Pure Lua implementation, no external requirements


INSTALLATION                                     *beam-beam.nvim-installation*


USING LAZY.NVIM ~

>lua
    {
      "Piotr1215/beam.nvim",
      config = function()
        require("beam").setup()  -- Uses default prefix ','
      end,
    }
<


USING PACKER.NVIM ~

>lua
    use {
      "Piotr1215/beam.nvim",
      config = function()
        require("beam").setup()  -- Uses default prefix ','
      end,
    }
<

**Note:** The plugin uses `,` as the default prefix. All mappings like `,yi"`,
`,dap`, etc. are automatically created. You can customize the prefix in the
setup (see Configuration section).


CONFIGURATION                                   *beam-beam.nvim-configuration*


DEFAULT SETUP ~

>lua
    require('beam').setup({
      prefix = ',',                      -- Your prefix key (mini-leader)
      visual_feedback_duration = 150,    -- ms to show selection
      clear_highlight = true,            -- Clear search highlight after operation
      clear_highlight_delay = 500,       -- ms before clearing
    })
<


CUSTOM TEXT OBJECTS ~

beam.nvim can define its own text objects that work with all beam operations.
This is useful when you want text objects that don’t exist globally but
should work with remote operations.

>lua
    require('beam').setup({
      prefix = ',',
      enable_default_text_objects = true, -- Enables beam's built-in text objects (currently: im/am for markdown code blocks)
      custom_text_objects = {
        -- Simple format: Just a description for beam operations
        -- NOTE: This assumes the text object already exists (e.g., from treesitter-textobjects)
        -- It only adds beam keymaps like ,yiF but doesn't create the iF/aF text object itself
        ['F'] = 'function (treesitter)',
        
        -- Full format: Creates the actual text object AND adds beam operations
        -- This creates the ir/ar text objects that work everywhere in Vim
        ['r'] = {
          desc = 'Ruby block',
          select = function(inclusive)
            -- Your text object implementation
            -- inclusive: true for 'around', false for 'inside'
            if inclusive then
              vim.cmd('normal! vaB')  -- around block
            else
              vim.cmd('normal! viB')  -- inside block
            end
          end
        }
      }
    })
    
    -- Or register them dynamically
    require('beam').register_text_object('z', 'custom zone')
    
    -- Register with implementation
    require('beam').register_text_object('g', {
      desc = 'git conflict',
      select = function(inclusive)
        -- Implementation to select git conflict markers
      end
    })
<

**Built-in Text Objects:** - `im`/`am` - Inside/around markdown code block
(triple backticks) - enabled with `enable_default_text_objects = true`


STATUSLINE INTEGRATION ~

Add the pending operation indicator to your statusline:

>lua
    -- Lualine
    sections = {
      lualine_x = {
        function() return vim.g.beam_search_operator_indicator or '' end
      }
    }
    
    -- Native statusline
    vim.opt.statusline:append('%{get(g:,"beam_search_operator_indicator","")}')
<


USAGE                                                   *beam-beam.nvim-usage*


BASIC OPERATIONS ~

All operations follow the pattern:
`{prefix}{operator}{text-object-modifier}{text-object}`

  Keys   Description
  ------ -------------------------------------
  ,yi"   Search & yank inside quotes
  ,dap   Search & delete around paragraph
  ,ciw   Search & change inside word
  ,vi{   Search & select inside curly braces

QUICK MODE (EMPTY SEARCH = NEXT) ~

Just press Enter without typing to operate on the NEXT occurrence:

  Keys          Action
  ------------- -------------------------
  ,yi"<Enter>   Yank inside NEXT quotes
  ,dip<Enter>   Delete NEXT paragraph
  ,cif<Enter>   Change NEXT function

LINE OPERATIONS ~

Special uppercase operators for entire lines:

  Keys   Description
  ------ ------------------------------------
  ,Y     Search & yank entire line
  ,D     Search & delete entire line
  ,C     Search & change entire line
  ,V     Search & visual select entire line

SEARCH NAVIGATION ~

While searching, use these keys to navigate matches: - `Ctrl-G` - Jump to next
match - `Ctrl-T` - Jump to previous match - `Enter` - Execute operation at
current match - `Esc` - Cancel operation


TECHNICAL DETAILS                           *beam-beam.nvim-technical-details*

beam.nvim uses a clever three-phase approach:

1. **Setup Phase**Captures your intended operation and stores it
2. **Search Phase**Returns control to Neovim’s native `/` search
3. **Execute Phase**On search completion, executes the operation at the target location

This approach gives you all of Neovim’s search features (regex,
case-sensitivity, incremental highlight) for free!


INTEGRATION WITH OTHER PLUGINS *beam-beam.nvim-integration-with-other-plugins*


TREESITTER TEXT OBJECTS ~

>lua
    local beam = require('beam')
    if beam then
      beam.register_text_objects({
        ['f'] = 'function (treesitter)',
        ['c'] = 'class (treesitter)',
        ['l'] = 'loop (treesitter)',
        ['a'] = 'parameter (treesitter)',
      })
    end
<


MINI.AI ~

>lua
    -- After setting up mini.ai
    local beam = require('beam')
    if beam then
      beam.register_text_objects({
        ['f'] = 'function (mini.ai)',
        ['a'] = 'argument (mini.ai)',
      })
    end
<


COMPARISON WITH ALTERNATIVES     *beam-beam.nvim-comparison-with-alternatives*

  Feature          beam.nvim         flash.nvim   leap.nvim
  ---------------- ----------------- ------------ ---------------
  Dependencies     None              None         None
  Learning curve   None (uses /)     Labels       2-char search
  Operations       y/d/c/v + lines   Jump only    Jump only
  Text objects     All + custom      N/A          N/A
  Search regex     Full Vim regex    Limited      No
  Native feel      Yes (uses /)      No           No

SHOWCASE                                             *beam-beam.nvim-showcase*


OPERATING ON NEXT OCCURRENCE ~

Empty search instantly operates on the next text object - no pattern needed!


VISUAL FEEDBACK ~

See exactly what will be affected before the operation completes.


STATUSLINE INTEGRATION ~

Always know what operation is pending with the optional statusline indicator.


COMMANDS                                             *beam-beam.nvim-commands*

  Command       Description
  ------------- ---------------------------------
  :BeamReload   Reload the plugin configuration

TROUBLESHOOTING                               *beam-beam.nvim-troubleshooting*


QUICK HEALTH CHECK ~

Run `:checkhealth beam` to diagnose common issues.


MAPPINGS NOT WORKING? ~

- Check if your prefix key is already mapped: `:verbose nmap <prefix>` (where `<prefix>` is your configured prefix, default is `,`)
- Ensure the plugin is loaded: `:lua print(vim.g.loaded_beam)`
- Verify your configuration: `:lua print(vim.inspect(require('beam').get_config()))`


OPERATIONS NOT EXECUTING? ~

- Make sure you have the text objects installed that you’re trying to use
- Check `:messages` for any error output


CREDITS                                               *beam-beam.nvim-credits*

Inspired by the power of Vim’s composable operations and the desire to
operate on text without losing context.


INSPIRATION ~

This plugin was inspired by several excellent Neovim plugins that explore
innovative ways of navigating and manipulating text:

- flash.nvim <https://github.com/folke/flash.nvim> - Jump to any location with minimal keystrokes
- leap.nvim <https://github.com/ggandor/leap.nvim> - General-purpose motion plugin with 2-character search
- hop.nvim <https://github.com/phaazon/hop.nvim> - Neovim motions on speed
- vim-sneak <https://github.com/justinmk/vim-sneak> - The missing motion for Vim

While these plugins focus on cursor movement, beam.nvim takes a different
approach: **operate on remote text, moving only when it makes sense** - stay in
place for yank and delete, jump to location for change and visual selection.


LICENSE                                               *beam-beam.nvim-license*

MIT

------------------------------------------------------------------------------

==============================================================================
2. Links                                                          *beam-links*

1. *Statusline Indicator*: static/status-line.png

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
