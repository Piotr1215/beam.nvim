*beam.txt*    Remote text operations without moving cursor
*beam.nvim*

==============================================================================
CONTENTS                                                        *beam-contents*

  1. Introduction                                          |beam-introduction|
  2. Requirements                                          |beam-requirements|
  3. Installation                                          |beam-installation|
  4. Configuration                                         |beam-configuration|
  5. Usage                                                 |beam-usage|
  6. Keybindings                                          |beam-keybindings|
  7. Custom Text Objects                                  |beam-custom-objects|
  8. API                                                   |beam-api|

==============================================================================
INTRODUCTION                                                *beam-introduction*

beam.nvim allows you to perform text operations (yank, delete, change, visual
select) on distant text without moving your cursor. It hijacks Neovim's native
search to enable "remote" operations.

Key features:
- Yank/delete text remotely with cursor preservation
- Change/visual operations with intelligent cursor movement
- Works with all native Vim text objects
- Supports custom text objects (like markdown code blocks)
- Visual feedback during operations
- Clean integration with native search

==============================================================================
REQUIREMENTS                                                *beam-requirements*

- Neovim >= 0.8.0

==============================================================================
INSTALLATION                                                *beam-installation*

Using lazy.nvim:
>lua
  {
    "your-username/beam.nvim",
    config = function()
      require("beam").setup({
        -- your configuration
      })
    end,
  }
<

==============================================================================
CONFIGURATION                                              *beam-configuration*

Default configuration:
>lua
  {
    prefix = ',',                      -- Prefix for all keybindings
    visual_feedback_duration = 150,   -- Visual feedback in milliseconds
    clear_highlight = true,           -- Clear search highlight after operation
    clear_highlight_delay = 500,      -- Delay before clearing highlight
    enable_default_text_objects = true, -- Enable im/am for markdown
    custom_text_objects = {},         -- Custom text object definitions
  }
<

==============================================================================
USAGE                                                              *beam-usage*

beam.nvim follows a three-phase operation:

1. Initiate operation: `,y` (yank), `,d` (delete), `,c` (change), `,v` (visual)
2. Specify text object: `iw` (inner word), `i"` (inside quotes), etc.
3. Search for target: Use `/` to search, press Enter on target

Example workflows:

Yank a distant function name:                                   *beam-example-yank*
  1. Press `,yiw` (yank inner word)
  2. Type `/functionName` and press Enter
  3. The word is yanked, cursor stays at original position

Delete remote quotes content:                                  *beam-example-delete*
  1. Press `,di"` (delete inside quotes)
  2. Search for the line with quotes
  3. Content inside quotes is deleted, cursor preserved

Change a distant variable:                                     *beam-example-change*
  1. Press `,ciw` (change inner word)
  2. Search for the variable
  3. Variable is deleted and you're in insert mode

==============================================================================
KEYBINDINGS                                                  *beam-keybindings*

With default prefix ',':

Text Object Operations:
  `,y{motion}` - Yank text object at search target
  `,d{motion}` - Delete text object at search target
  `,c{motion}` - Change text object at search target
  `,v{motion}` - Visual select text object at search target

Line Operations:
  `,Y` - Yank entire line at search target
  `,D` - Delete entire line at search target
  `,C` - Change entire line at search target
  `,V` - Visual select line at search target

Common Text Objects:
  `iw`/`aw` - inner/around word
  `iW`/`aW` - inner/around WORD
  `i"`/`a"` - inside/around double quotes
  `i'`/`a'` - inside/around single quotes
  `i(`/`a(` - inside/around parentheses
  `i[`/`a[` - inside/around brackets
  `i{`/`a{` - inside/around braces
  `ip`/`ap` - inside/around paragraph
  `im`/`am` - inside/around markdown code block (if enabled)

==============================================================================
CUSTOM TEXT OBJECTS                                      *beam-custom-objects*

beam.nvim supports custom text objects. Example for markdown code blocks:

>lua
  require("beam").setup({
    enable_default_text_objects = true,  -- Enables im/am
    custom_text_objects = {
      -- Add your custom objects here
      x = {
        select = function(around)
          -- Your selection logic
        end,
        desc = "custom object x"
      }
    }
  })
<

The built-in markdown code block text object:
- `im` - inside markdown code block (content only)
- `am` - around markdown code block (including backticks)

==============================================================================
API                                                                  *beam-api*

                                                                  *beam.setup()*
`beam.setup({config})`
    Configure beam.nvim with given options.

    Parameters:
      {config} (table) Configuration options

                                                     *beam.register_text_object()*
`beam.register_text_object({key}, {opts})`
    Register a custom text object.

    Parameters:
      {key} (string) Single character for the text object
      {opts} (table) Text object definition
        - select (function) Selection function(around: boolean)
        - desc (string) Description

==============================================================================
vim:tw=78:ts=8:ft=help:norl: